# AI Language Learn - Projeto NestJS

## Visão Geral
Este é um projeto NestJS para aprendizado de idiomas com IA. O projeto utiliza Prisma como ORM e inclui funcionalidades de usuários.

## Estrutura do Projeto
- **Framework**: NestJS 11.x
- **ORM**: Prisma 6.x
- **Linguagem**: TypeScript
- **Testes**: Jest
- **Linting**: ESLint + Prettier

## Configurações Importantes

### ESLint
- Configurado com `eslint.config.mjs`
- Regras específicas desabilitadas para compatibilidade com testes
- Integração com Prettier

### TypeScript
- Target: ES2023
- Strict mode habilitado
- Decorators experimentais habilitados

### Scripts Disponíveis
- `npm run build` - Compila o projeto
- `npm run start:dev` - Inicia em modo desenvolvimento
- `npm run lint` - Executa linting
- `npm test` - Executa testes
- `npm run prisma:generate` - Gera cliente Prisma
- `npm run prisma:migrate` - Executa migrações

## Padrões de Código

### DTOs
- Uso de `class-transformer` para transformação de dados
- Validação com `class-validator`
- Transformação de datas com `@Transform`

### Testes
- Uso de Jest para testes unitários
- Mocks para serviços e repositórios
- Verificação de chamadas de métodos com `jest.mocked()`

### Interceptors
- Transform interceptor para padronizar respostas
- Estrutura de resposta: `{ data: T }`

## Problemas Resolvidos
- Erros de lint relacionados a `@typescript-eslint/unbound-method` em testes
- Erros de tipo `any` em transformações de data
- Promises não aguardadas no bootstrap da aplicação
- Tipagem inadequada em interceptors

## Dependências Principais
- `@nestjs/common`, `@nestjs/core`, `@nestjs/platform-express`
- `@prisma/client`, `prisma`
- `class-transformer`, `class-validator`
- `uuid`, `@types/uuid`

## Comandos de Desenvolvimento
```bash
# Instalar dependências
npm install

# Gerar cliente Prisma
npm run prisma:generate

# Executar migrações
npm run prisma:migrate

# Desenvolver
npm run start:dev

# Testar
npm test

# Lint
npm run lint

# Build
npm run build
```
